import os
import pickle
import numpy as np

class LinearRegressionGD:
    def __init__(self, learning_rate=0.01, n_iter=1000):
        self.learning_rate = learning_rate
        self.n_iter = n_iter
        self.theta = None
        self.history = []

    def fit(self, X, y):
        m, n = X.shape
        self.theta = np.zeros((n, 1))
        for i in range(self.n_iter):
            gradients = (1/m) * X.T @ (X @ self.theta - y)
            self.theta -= self.learning_rate * gradients
            cost = (1/(2*m)) * np.sum((X @ self.theta - y)**2)
            self.history.append(cost)
        return self

    def predict(self, X):
        return X @ self.theta

# ensure y_train is column vector
if isinstance(y_train, np.ndarray) and y_train.ndim == 1:
    y_train = y_train.reshape(-1, 1)

model = LinearRegressionGD(learning_rate=0.01, n_iter=1000)
model.fit(X_train, y_train)

os.makedirs("models", exist_ok=True)
with open("models/regression_model1.pkl", "wb") as f:
    pickle.dump(model, f)

